//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.5
//
// <auto-generated>
//
// Generated from file `calculator.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Demo;

public class Line implements java.lang.Cloneable,
                             java.io.Serializable
{
    public float x1;

    public float y1;

    public float x2;

    public float y2;

    public Line()
    {
    }

    public Line(float x1, float y1, float x2, float y2)
    {
        this.x1 = x1;
        this.y1 = y1;
        this.x2 = x2;
        this.y2 = y2;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Line r = null;
        if(rhs instanceof Line)
        {
            r = (Line)rhs;
        }

        if(r != null)
        {
            if(this.x1 != r.x1)
            {
                return false;
            }
            if(this.y1 != r.y1)
            {
                return false;
            }
            if(this.x2 != r.x2)
            {
                return false;
            }
            if(this.y2 != r.y2)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::Demo::Line");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, x1);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, y1);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, x2);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, y2);
        return h_;
    }

    public Line clone()
    {
        Line c = null;
        try
        {
            c = (Line)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeFloat(this.x1);
        ostr.writeFloat(this.y1);
        ostr.writeFloat(this.x2);
        ostr.writeFloat(this.y2);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.x1 = istr.readFloat();
        this.y1 = istr.readFloat();
        this.x2 = istr.readFloat();
        this.y2 = istr.readFloat();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, Line v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public Line ice_read(com.zeroc.Ice.InputStream istr)
    {
        Line v = new Line();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<Line> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, Line v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            ostr.writeSize(16);
            ice_write(ostr, v);
        }
    }

    static public java.util.Optional<Line> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            istr.skipSize();
            return java.util.Optional.of(Line.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final Line _nullMarshalValue = new Line();

    /** @hidden */
    public static final long serialVersionUID = -277923578L;
}
