//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.5
//
// <auto-generated>
//
// Generated from file `calculator.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Demo
{
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial struct Line
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        public float x1;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        public float y1;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        public float x2;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        public float y2;

        #endregion

        partial void ice_initialize();

        #region Constructor

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        public Line(float x1, float y1, float x2, float y2)
        {
            this.x1 = x1;
            this.y1 = y1;
            this.x2 = x2;
            this.y2 = y2;
            ice_initialize();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::Demo::Line");
            global::IceInternal.HashUtil.hashAdd(ref h_, x1);
            global::IceInternal.HashUtil.hashAdd(ref h_, y1);
            global::IceInternal.HashUtil.hashAdd(ref h_, x2);
            global::IceInternal.HashUtil.hashAdd(ref h_, y2);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        public override bool Equals(object other)
        {
            if(!(other is Line))
            {
                return false;
            }
            Line o = (Line)other;
            if(!this.x1.Equals(o.x1))
            {
                return false;
            }
            if(!this.y1.Equals(o.y1))
            {
                return false;
            }
            if(!this.x2.Equals(o.x2))
            {
                return false;
            }
            if(!this.y2.Equals(o.y2))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        public static bool operator==(Line lhs, Line rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        public static bool operator!=(Line lhs, Line rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeFloat(this.x1);
            ostr.writeFloat(this.y1);
            ostr.writeFloat(this.x2);
            ostr.writeFloat(this.y2);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.x1 = istr.readFloat();
            this.y1 = istr.readFloat();
            this.x2 = istr.readFloat();
            this.y2 = istr.readFloat();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        public static void ice_write(global::Ice.OutputStream ostr, Line v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        public static Line ice_read(global::Ice.InputStream istr)
        {
            var v = new Line();
            v.ice_readMembers(istr);
            return v;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Calc : global::Ice.Object, CalcOperations_
    {
    }
}

namespace Demo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public delegate void Callback_Calc_lineLength(float ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public delegate void Callback_Calc_squareSequence(float[] ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public delegate void Callback_Calc_countLetters(global::System.Collections.Generic.Dictionary<string, int> ret);
}

namespace Demo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public interface CalcPrx : global::Ice.ObjectPrx
    {
        float lineLength(Line l, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<float> lineLengthAsync(Line l, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Calc_lineLength> begin_lineLength(Line l, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_lineLength(Line l, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_lineLength(Line l, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        float end_lineLength(global::Ice.AsyncResult asyncResult);

        float[] squareSequence(float[] s, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<float[]> squareSequenceAsync(float[] s, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Calc_squareSequence> begin_squareSequence(float[] s, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_squareSequence(float[] s, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_squareSequence(float[] s, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        float[] end_squareSequence(global::Ice.AsyncResult asyncResult);

        global::System.Collections.Generic.Dictionary<string, int> countLetters(string sentence, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, int>> countLettersAsync(string sentence, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Calc_countLetters> begin_countLetters(string sentence, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_countLetters(string sentence, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_countLetters(string sentence, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        global::System.Collections.Generic.Dictionary<string, int> end_countLetters(global::Ice.AsyncResult asyncResult);
    }
}

namespace Demo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public interface CalcOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        float lineLength(Line l, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        float[] squareSequence(float[] s, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        global::System.Collections.Generic.Dictionary<string, int> countLetters(string sentence, global::Ice.Current current = null);
    }
}

namespace Demo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public sealed class SeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, float[] v)
        {
            ostr.writeFloatSeq(v);
        }

        public static float[] read(global::Ice.InputStream istr)
        {
            float[] v;
            v = istr.readFloatSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public sealed class SquareSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, float[] v)
        {
            ostr.writeFloatSeq(v);
        }

        public static float[] read(global::Ice.InputStream istr)
        {
            float[] v;
            v = istr.readFloatSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public sealed class LetterCountHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, int> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, int> e in v)
                {
                    ostr.writeString(e.Key);
                    ostr.writeInt(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, int> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, int> r = new global::System.Collections.Generic.Dictionary<string, int>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                int v;
                v = istr.readInt();
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    [global::System.Serializable]
    public sealed class CalcPrxHelper : global::Ice.ObjectPrxHelperBase, CalcPrx
    {
        public CalcPrxHelper()
        {
        }

        public CalcPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public float lineLength(Line l, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_lineLengthAsync(l, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float[] squareSequence(float[] s, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_squareSequenceAsync(s, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, int> countLetters(string sentence, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_countLettersAsync(sentence, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<float> lineLengthAsync(Line l, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_lineLengthAsync(l, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_lineLengthAsync(Line iceP_l, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_lineLength_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_lineLength(iceP_l, context, synchronous, completed);
            return completed.Task;
        }

        private const string _lineLength_name = "lineLength";

        private void _iceI_lineLength(Line iceP_l, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _lineLength_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    iceP_l.ice_writeMembers(ostr);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<float[]> squareSequenceAsync(float[] s, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_squareSequenceAsync(s, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float[]> _iceI_squareSequenceAsync(float[] iceP_s, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_squareSequence_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float[]>(progress, cancel);
            _iceI_squareSequence(iceP_s, context, synchronous, completed);
            return completed.Task;
        }

        private const string _squareSequence_name = "squareSequence";

        private void _iceI_squareSequence(float[] iceP_s, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float[]>(completed);
            outAsync.invoke(
                _squareSequence_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    SeqHelper.write(ostr, iceP_s);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    float[] ret;
                    ret = SquareSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, int>> countLettersAsync(string sentence, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_countLettersAsync(sentence, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, int>> _iceI_countLettersAsync(string iceP_sentence, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_countLetters_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<string, int>>(progress, cancel);
            _iceI_countLetters(iceP_sentence, context, synchronous, completed);
            return completed.Task;
        }

        private const string _countLetters_name = "countLetters";

        private void _iceI_countLetters(string iceP_sentence, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<string, int>>(completed);
            outAsync.invoke(
                _countLetters_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_sentence);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::System.Collections.Generic.Dictionary<string, int> ret;
                    ret = LetterCountHelper.read(istr);
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Calc_lineLength> begin_lineLength(Line l, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_lineLength(l, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_lineLength(Line l, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_lineLength(l, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_lineLength(Line l, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_lineLength(l, context, callback, cookie, false);
        }

        public float end_lineLength(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _lineLength_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Calc_lineLength> begin_lineLength(Line iceP_l, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_lineLength_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Calc_lineLength, float>(
                (Callback_Calc_lineLength cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _lineLength_name, cookie, completedCallback);
            _iceI_lineLength(iceP_l, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Calc_squareSequence> begin_squareSequence(float[] s, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_squareSequence(s, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_squareSequence(float[] s, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_squareSequence(s, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_squareSequence(float[] s, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_squareSequence(s, context, callback, cookie, false);
        }

        public float[] end_squareSequence(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _squareSequence_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Calc_squareSequence> begin_squareSequence(float[] iceP_s, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_squareSequence_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Calc_squareSequence, float[]>(
                (Callback_Calc_squareSequence cb, float[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _squareSequence_name, cookie, completedCallback);
            _iceI_squareSequence(iceP_s, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Calc_countLetters> begin_countLetters(string sentence, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_countLetters(sentence, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_countLetters(string sentence, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_countLetters(sentence, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_countLetters(string sentence, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_countLetters(sentence, context, callback, cookie, false);
        }

        public global::System.Collections.Generic.Dictionary<string, int> end_countLetters(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _countLetters_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::System.Collections.Generic.Dictionary<string, int>>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Calc_countLetters> begin_countLetters(string iceP_sentence, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_countLetters_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Calc_countLetters, global::System.Collections.Generic.Dictionary<string, int>>(
                (Callback_Calc_countLetters cb, global::System.Collections.Generic.Dictionary<string, int> ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _countLetters_name, cookie, completedCallback);
            _iceI_countLetters(iceP_sentence, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static CalcPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CalcPrx r = b as CalcPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                CalcPrxHelper h = new CalcPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CalcPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            CalcPrx r = b as CalcPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                CalcPrxHelper h = new CalcPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CalcPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    CalcPrxHelper h = new CalcPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CalcPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    CalcPrxHelper h = new CalcPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CalcPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CalcPrx r = b as CalcPrx;
            if(r == null)
            {
                CalcPrxHelper h = new CalcPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CalcPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            CalcPrxHelper h = new CalcPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Demo::Calc",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, CalcPrx v)
        {
            ostr.writeProxy(v);
        }

        public static CalcPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                CalcPrxHelper result = new CalcPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Demo
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public abstract class CalcDisp_ : global::Ice.ObjectImpl, Calc
    {
        #region Slice operations

        public abstract float lineLength(Line l, global::Ice.Current current = null);

        public abstract float[] squareSequence(float[] s, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<string, int> countLetters(string sentence, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Demo::Calc",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_lineLength(Calc obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            Line iceP_l;
            iceP_l = new Line();
            iceP_l.ice_readMembers(istr);
            inS.endReadParams();
            var ret = obj.lineLength(iceP_l, current);
            var ostr = inS.startWriteParams();
            ostr.writeFloat(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_squareSequence(Calc obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            float[] iceP_s;
            iceP_s = SeqHelper.read(istr);
            inS.endReadParams();
            var ret = obj.squareSequence(iceP_s, current);
            var ostr = inS.startWriteParams();
            SquareSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_countLetters(Calc obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_sentence;
            iceP_sentence = istr.readString();
            inS.endReadParams();
            var ret = obj.countLetters(iceP_sentence, current);
            var ostr = inS.startWriteParams();
            LetterCountHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "countLetters",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "lineLength",
            "squareSequence"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_countLetters(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 5:
                {
                    return iceD_lineLength(this, inS, current);
                }
                case 6:
                {
                    return iceD_squareSequence(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
